version: "3.8"

services:
  sfu-mongodb:
    build: ./docker/mongodb
    container_name: mongo
    ports:
      - "27018:27017"
    networks:
      - backend
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MON_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MON_PASSWORD}
    volumes:
      - mongodata:/data/db

  sfu-postgres:
    build: ./docker/postgres
    ports:
      - "5433:5432"
    networks:
      - backend
    environment:
      POSTGRES_USER: ${POST_USERNAME}
      POSTGRES_PASSWORD: ${POST_PASSWORD}
    volumes:
      - postgresdata:/var/lib/postgresql/data

  sfu-rabbitmq:
    build: ./docker/rabbitmq
    ports:
      - "5673:5672"
      - "15673:15672"
    networks:
      - backend
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq

  sfu-pgadmin:
    image: dpage/pgadmin4
    container_name: sfu-pgadmin
    ports:
      - "5050:80"
    networks:
      - backend
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - pgadmindata:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: ${MON_HOST}
      ME_CONFIG_MONGODB_PORT: ${MON_PORT}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MON_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MON_PASSWORD}
      ME_CONFIG_BASICAUTH: "false"
    networks:
      - backend
    depends_on:
      - sfu-mongodb

  sfy-seeder:
    container_name: seeder
    build:
      context: ./seeder
      dockerfile: Dockerfile
    depends_on:
      - sfu-postgres
    environment:
      DATABASE_URL: ${POST_DATABASE_URL}
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
      RABBIT_HOST: ${RABBIT_HOST}
      RABBIT_PORT: ${RABBIT_PORT}
    volumes:
      - ./seeder:/app
    networks:
      - backend

  mongo-sync-worker:
    build:
      context: ./server/mongo-sync-worker
      dockerfile: Dockerfile
    environment:
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
      RABBIT_HOST: ${RABBIT_HOST}
      RABBIT_PORT: ${RABBIT_PORT}
      MON_USERNAME: ${MON_USERNAME}
      MON_PASSWORD: ${MON_PASSWORD}
      MON_HOST: ${MON_HOST}
      MON_PORT: ${MON_PORT}
      MON_DB: ${MON_DB}
    depends_on:
      - sfu-rabbitmq
      - sfu-mongodb
    networks:
      - backend

  grocery_handler:
    build:
      context: ./server/grocery_handler
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    volumes:
      - ./server/grocery_handler:/app
    networks:
      - backend
    depends_on:
      - sfu-postgres
    command: npm start
    environment:
      POST_USERNAME: ${POST_USERNAME}
      POST_PASSWORD: ${POST_PASSWORD}
      POST_HOST: ${POST_HOST}
      POST_PORT: ${POST_PORT}
      POST_DB: ${POST_DB}
      DATABASE_URL: ${POST_DATABASE_URL}
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
      RABBIT_HOST: ${RABBIT_HOST}
      RABBIT_PORT: ${RABBIT_PORT}
      IMGUR_CLIENT_ID: ${IMGUR_CLIENT_ID}
      MON_USERNAME: ${MON_USERNAME}
      MON_PASSWORD: ${MON_PASSWORD}
      MON_HOST: ${MON_HOST}
      MON_PORT: ${MON_PORT}
      MON_DB: ${MON_DB}

  shopforyou-client:
    container_name: shopforyou-client
    build:
      context: ./shopforyou-client
      dockerfile: Dockerfile
    environment:
      VITE_API_URL: http://localhost:3005
      CHOKIDAR_USEPOLLING: true
    ports:
      - "8080:8080"
    networks:
      - frontend
    volumes:
      - ./shopforyou-client:/app
      - /app/node_modules
  user_handler:
    build:
      context: ./server/user_handler
      dockerfile: Dockerfile
    ports:
      - "3006:3006"
    volumes:
      - ./server/user_handler:/app
    networks:
      - backend
    depends_on:
      - sfu-postgres
    command: npm start
    environment:
      POST_USERNAME: ${POST_USERNAME}
      POST_PASSWORD: ${POST_PASSWORD}
      POST_HOST: ${POST_HOST}
      POST_PORT: ${POST_PORT}
      POST_DB: ${POST_DB}
      DATABASE_URL: ${POST_DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}


volumes:
  mongodata:
    driver: local
  postgresdata:
    driver: local
  rabbitmqdata:
    driver: local
  pgadmindata:
    driver: local

networks:
  backend:
  frontend:
